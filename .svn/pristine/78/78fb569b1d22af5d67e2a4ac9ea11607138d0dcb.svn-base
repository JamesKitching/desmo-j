<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
        <title>The DESMO-J Tutorial :
Events Step by Step
        </title>
        <link rel="stylesheet" type="text/css" href="../templates/style_blue.css" title="tutorial">
</head>

<body background="../images/background_light_lilac.gif">

<!-- Das Basis-Seitenlayout: Tabelle mit 3 Spalten und 5 Zeilen -->

<table class=table_def>
<tr>
       <td class=col_left><img src="../images/logo.gif" border="0"></td>
       <td>&nbsp;</td>
       <td class=col_right>
                      <H1>
Events Step by Step
                   </H1>
                   <!--<p> -->
                      <H1>
Model Implementation (2)
                   </H1>
                   <!-- </p> -->
                   <p>
                   <H2>
The Service End Event
                   </H2>
                   </p>
           </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td class=colorblock>&nbsp;</td>
       <td class=row_nav>
               <div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="impl22.html">prev</a></li><li><a href="impl23.html">next</a></li>
                </ul></div>
           </td>
</tr>
<tr>
       <td class=col_left>
                       <div id="navigation"><ul>
<li><a href="../overview/0.html">The DESMO-J Tutorial</a></li>
<li><a href="../prerequisites/0.html">Prerequisites</a></li>
<li><a href="../nutshell/0.html">DESMO-J in a Nutshell</a></li>
<li><a href="../distilled/0.html">DESMO-J Distilled</a></li>
<li><a href="../at_work/0.html">DESMO-J at Work</a></li>
<li><a href="../processes/0.html">Processes Step by Step</a></li>
<li><a href="0.html" id="current_top">Events Step by Step</a><ol>
<li><a href="0.html">Introduction</a></li>
<li><a href="1.html">Model Description</a></li>
<li><a href="design0.html">Model Design</a></li>
<li><a href="impl0.html">Model Implementation (1)</a></li>
<li><a href="impl20.html" id="current_middle">Model Implementation (2)</a><ol>
<li><a href="impl20.html">The Entities</a></li>
<li><a href="impl21.html">The Truck Generator Event</a></li>
<li><a href="impl22.html">The Truck Arrival Event</a></li>
<li><a href="impl23.html" id="current_middle">The Service End Event</a></li>
</ol></li>
<li><a href="exp0.html">Experimentation</a></li>
</ol></li>
<li><a href="../distributions/0.html" id="current_bottom">Distributions</a></li>
<li><a href="../statistics/0.html">Statistical Data Collectors</a></li>
<li><a href="../advanced/0.html">Advanced Modelling Features</a></li>
                           </ul></div>
           </td>
       <td>&nbsp;</td>
       <td class=col_right>
                      <p>
<p>
Implementing the <b>service end event</b> is quite similar to implementing the truck arrival event; note, though, the the class named <tt>ServiceEndEvent</tt> is derived from <tt>EventOf2Entities</tt> as both a van carrier and a truck are referred to. Similarly to the truck arrival event, add the appropriate import statement and define the constructor. Then define a field (attribute) to store a reference to the model in and assign it a value inside the constructor.
</p>

<pre class="code">
import desmoj.core.simulator.*;
/**
 * This class represents the service end event
 * in the EventsExample model.
 * It occurs when a van carrier finishes loading a truck.
 */
public class ServiceEndEvent extends EventOf2Entities&lt;VanCarrier,Truck&gt; {

   /**
    * A reference to the model this event is a part of.
    * Useful shortcut to access the model's static components
    */
   private EventsExample myModel;

   /**
    * Constructor of the service end event
    *
    * Used to create a new service end event
    *
    * @param owner the model this event belongs to
    * @param name this event's name
    * @param showInTrace flag to indicate if this event shall produce output
    *                    for the trace
    */
   public ServiceEndEvent(Model owner, String name, boolean showInTrace) {
      super(owner, name, showInTrace);
      // store a reference to the model this event is associated with
      myModel = (EventsExample)owner;
   }
</pre>

<p>
Now we have to implement the <tt>eventRoutine(...)</tt> method that refers to a van carrier and a truck. Please refer to the <a href="design2.html#ServiceEndEvent">conceptual model</a> if you need a reminder of what happens when a van carrier finishes (un)loading a truck. First, the van carrier releases the truck so that it may leave the system. The van carrier is now free to (un)load another truck so we have to check if there are any trucks waiting.
</p>

<pre class="code">
   /**
    * This eventRoutine() describes what happens when a van carrier finishes
    * loading a truck.
    *
    * The truck leaves the system.
    * The van carrier will then check if there is another truck
    * waiting for service.
    * If there is another truck waiting it will service it.
    * If not it will wait on its parking spot for the next
    * customer to arrive.
    */
   public void eventRoutine(VanCarrier vanCarrier, Truck truck) {

      // pass the departure of the truck to the trace
      sendTraceNote(truck + " leaves the terminal");

      // check if there are other trucks waiting
      if (!myModel.truckQueue.isEmpty())
</pre>

<p>
If there is at least one truck waiting (so that the queue is not empty), it can immediately proceed to be (un)loaded by the van carrier. This means, we take the first waiting truck out of the queue, have the van carrier keep a reference to it and schedule a new service end event (similar to the actions performed in the truck arrival event).
</p>

<pre class="code">
      {
         // YES, there is at least one other truck waiting

         // remove the first waiting truck from the queue
         Truck nextTruck = myModel.truckQueue.first();
         myModel.truckQueue.remove(nextTruck);

         // create a new service end event
         ServiceEndEvent event = new ServiceEndEvent(myModel, "ServiceEndEvent", true);
         // and schedule it for at the appropriate time
         event.schedule(vanCarrier, nextTruck, new TimeSpan(myModel.getServiceTime(), TimeUnit.MINUTES));
      }
</pre>

<p>If there are no trucks waiting, the van carrier just returns to its parking spot to wait for a new truck to arrive.</p>

<pre class="code">
      else {
         // NO, there are no trucks waiting

         // --> the van carrier is placed on its parking spot
         myModel.idleVCQueue.insert(vanCarrier);

         // the VC is now waiting for a new customer to arrive
      }

   }
}
</pre>
<br /><br />
                   </p>
           </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td  class=colorblock>&nbsp;</td>
       <td class=row_nav>
               <div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="impl22.html">prev</a></li><li><a href="impl23.html">next</a></li>
                </ul></div>
           </td>
</tr>
<tr>
       <td class=col_left><div id="navigation">&nbsp;</div></td>
       <td>&nbsp;</td>
       <td class=row_url>
http://desmoj.sourceforge.net/tutorial/events/impl23.html
           </td>
</tr>
</table>

</body>
</html>