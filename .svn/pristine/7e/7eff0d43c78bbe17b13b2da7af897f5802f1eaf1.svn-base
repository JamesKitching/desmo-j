<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>The DESMO-J Tutorial :
Advanced Modelling Features
	</title>
	<link rel="stylesheet" type="text/css" href="../templates/style_blue.css" title="tutorial">
</head>

<body background="../images/background_light_lilac.gif">

<!-- Das Basis-Seitenlayout: Tabelle mit 3 Spalten und 5 Zeilen -->

<table class=table_def>
<tr>
       <td class=col_left><img src="../images/logo.gif" border="0"></td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <H1>
Advanced Modelling Features
		   </H1>
		   <!--<p> -->
	   	   <H1>
Bin
		   </H1>
		   <!-- </p> -->
		   <p>
		   <H2>
The Train Process
		   </H2>
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="bin3.html">prev</a></li><li><a href="bin5.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left>
       		<div id="navigation"><ul>
<li><a href="../overview/0.html">The DESMO-J Tutorial</a></li>
<li><a href="../prerequisites/0.html">Prerequisites</a></li>
<li><a href="../nutshell/0.html">DESMO-J in a Nutshell</a></li>
<li><a href="../distilled/0.html">DESMO-J Distilled</a></li>
<li><a href="../at_work/0.html">DESMO-J at Work</a></li>
<li><a href="../processes/0.html">Processes Step by Step</a></li>
<li><a href="../events/0.html">Events Step by Step</a></li>
<li><a href="../distributions/0.html">Distributions</a></li>
<li><a href="../statistics/0.html">Statistical Data Collectors</a></li>
<li><a href="0.html" id="current_top">Advanced Modelling Features</a><ol>
<li><a href="0.html">Overview</a></li>
<li><a href="res0.html">Res</a></li>
<li><a href="bin0.html" id="current_middle">Bin</a><ol>
<li><a href="bin0.html">What Is a Bin?</a></li>
<li><a href="bin1.html">Model Description</a></li>
<li><a href="bin2.html">The Model Class</a></li>
<li><a href="bin3.html">The Ship Process</a></li>
<li><a href="bin4.html" id="current_middle">The Train Process</a></li>
<li><a href="bin5.html">The Model Trace</a></li>
</ol></li>
<li><a href="condqueue0.html">CondQueue</a></li>
<li><a href="waitqueue0.html">WaitQueue</a></li>
<li><a href="interrupt0.html">Interrupts</a></li>
</ol></li>
	   		</ul></div>
	   </td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <p>
<p>
The train process in our example is associated to one of the four <tt>Bin</tt> objects we created in the model class. Each train has a certain length, i.e. can carry a certain number of containers. On arrival at the the railway station of the container terminal the train requests the number of containers from the storage area (bin) of its destination. This may result in the train having to wait until enough containers are available. When the train is loaded, it leaves the system and is replaced by the next train half an hour later.
</p>

<p>Let's have a look at the <tt>lifeCycle()</tt> method again:</p>

<pre class="code">
/**
 * Describes this train's life cycle:
 *
 * On arrival at the the railway station of the container terminal
 * the train requests the number of containers from the storage area (Bin) of
 * its destination. This may result in the train having to wait until enough
 * containers are available.
 * When the train is loaded, it leaves the system, freeing the track
 * for the next train.
 */
public void lifeCycle() throws SuspendExecution {

   // send some information to the tracefile for documentation reasons
   sendTraceNote("Train length:  " + length + " containers");

   // load containers from storage
   // --> the process may be passivated and placed on an internal queue
   // by the bin if there are not enough containers available
   storage.retrieve(this.length);

   // train is loaded and can leave the system

   // create successor train
   Train nextTrain = new Train(myModel, "Train to "+storage.getName(), true, storage);
   // and schedule it for arrival in half an minute
   nextTrain.activate(new TimeSpan(0.5, TimeUnit.MINUTES));

}
</pre>

<p>
We start with sending some information to the trace output when the ship arrives. Thus we'll see in the  trace report how many containers the train will need to load. Using the <tt>retrieve()</tt> method the train then tries to obtain a number of containers corresponding to its length. This may result in the train process to be automatically passivated by the <tt>Bin</tt> object, if there are  <b>not</b> enough containers available. The train process may be inserted into the internal waiting queue of the <tt>Bin</tt> object then. Otherwise it receives its containers immediately and proceeds. Before leaving the system, a train process creates and activates its successor.
</p>

<p>
Let us now take a look at the trace output of this example to see how the simulation processes interact via the <tt>Bin</tt> constructs.
</p>
<br /><br />
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td  class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="bin3.html">prev</a></li><li><a href="bin5.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left><div id="navigation">&nbsp;</div></td>
       <td>&nbsp;</td>
       <td class=row_url>
http://desmoj.sourceforge.net/tutorial/advanced/bin4.html
	   </td>
</tr>
</table>

</body>
</html>
