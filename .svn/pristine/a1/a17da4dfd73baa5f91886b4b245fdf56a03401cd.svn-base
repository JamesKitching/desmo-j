<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>The DESMO-J Tutorial :
Advanced Modelling Features
	</title>
	<link rel="stylesheet" type="text/css" href="../templates/style_blue.css" title="tutorial">
</head>

<body background="../images/background_light_lilac.gif">

<!-- Das Basis-Seitenlayout: Tabelle mit 3 Spalten und 5 Zeilen -->

<table class=table_def>
<tr>
       <td class=col_left><img src="../images/logo.gif" border="0"></td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <H1>
Advanced Modelling Features
		   </H1>
		   <!--<p> -->
	   	   <H1>
WaitQueue
		   </H1>
		   <!-- </p> -->
		   <p>
		   <H2>
The Process Cooperation Class
		   </H2>
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="waitqueue4.html">prev</a></li><li><a href="waitqueue6.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left>
       		<div id="navigation"><ul>
<li><a href="../overview/0.html">The DESMO-J Tutorial</a></li>
<li><a href="../prerequisites/0.html">Prerequisites</a></li>
<li><a href="../nutshell/0.html">DESMO-J in a Nutshell</a></li>
<li><a href="../distilled/0.html">DESMO-J Distilled</a></li>
<li><a href="../at_work/0.html">DESMO-J at Work</a></li>
<li><a href="../processes/0.html">Processes Step by Step</a></li>
<li><a href="../events/0.html">Events Step by Step</a></li>
<li><a href="../distributions/0.html">Distributions</a></li>
<li><a href="../statistics/0.html">Statistical Data Collectors</a></li>
<li><a href="0.html" id="current_top">Advanced Modelling Features</a><ol>
<li><a href="0.html">Overview</a></li>
<li><a href="res0.html">Res</a></li>
<li><a href="bin0.html">Bin</a></li>
<li><a href="condqueue0.html">CondQueue</a></li>
<li><a href="waitqueue0.html" id="current_middle">WaitQueue</a><ol>
<li><a href="waitqueue0.html">Master-Slave Process Cooperation</a></li>
<li><a href="waitqueue1.html">Model Description</a></li>
<li><a href="waitqueue2.html">The Model Class</a></li>
<li><a href="waitqueue3.html">The Train Process</a></li>
<li><a href="waitqueue4.html">The Ship Process</a></li>
<li><a href="waitqueue5.html" id="current_middle">The Process Cooperation Class</a></li>
<li><a href="waitqueue6.html">The Model Trace</a></li>
</ol></li>
<li><a href="interrupt0.html">Interrupts</a></li>
</ol></li>
	   		</ul></div>
	   </td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <p>
<p>
When using a wait queue to synchronise processes, a model designer has to specifiy the common task the two processes are wanting to perform. DESMO-J expects the model designer to derive a subclass from <tt>desmoj.core.advancedModellingFeatures.ProcessCoop&lt;Ship,Train&gt;</tt> class and implement the abstract method <tt>cooperate(Ship master, Train slave)</tt>.
</p>

<pre class="code">
package examples.waitQueue;

import desmoj.core.simulator.*;
import desmoj.core.advancedModellingFeatures.ProcessCoop;
import co.paralleluniverse.fibers.SuspendExecution;

/** The process cooperation between train and ship: transfers coal from
 *  train onto ship.
 */
public class CoalTransfer extends ProcessCoop&lt;Ship,Train&gt; {

   /** standard constructor */
   public CoalTransfer(WaitQueueExample model) {
	super(model, "coal transfer", true);
   }

   /** performs the cooperation between master (ship) and slave (train); i.e.
    *  unloads the train and loads the ship.
    */
   protected void cooperation(Ship master, Train slave) throws SuspendExecution {
	// just hold for the length of time it takes to transfer the coal
	hold(new TimeSpan(((WaitQueueExample)getModel()).unload.sample(), TimeUnit.MINUTES));
   }

}
</pre>

<p>
The <tt>cooperate()</tt> method defines the common task the master process (in this model: a ship) and the slave process (a train) are performing. In this case, it's unloading the train and loading its coal onto the ship, which is modelled as a simple <tt>hold()</tt> of the active master process.
</p>

<p>
Note that the <tt>ProcessCoop</tt> class defines shortcuts to all relevant methods of the master process, like <tt>hold()</tt> or <tt>activate()</tt>; i.e. calling <tt>hold()</tt> in the above <tt>cooperate()</tt> method results in calling <tt>hold()</tt> on the currently active process which is the master.
</p>

<p>
After cooperation is finished, the wait queue automatically schedules the slave process (train) for re-activation directly after the master (ship), before control passes to the master again.
</p>
<br /><br />
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td  class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="waitqueue4.html">prev</a></li><li><a href="waitqueue6.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left><div id="navigation">&nbsp;</div></td>
       <td>&nbsp;</td>
       <td class=row_url>
http://desmoj.sourceforge.net/tutorial/advanced/waitqueue5.html
	   </td>
</tr>
</table>

</body>
</html>