<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>The DESMO-J Tutorial :
Processes Step by Step
	</title>
	<link rel="stylesheet" type="text/css" href="../templates/style_blue.css" title="tutorial">
</head>

<body background="../images/background_light_lilac.gif">

<!-- Das Basis-Seitenlayout: Tabelle mit 3 Spalten und 5 Zeilen -->

<table class=table_def>
<tr>
       <td class=col_left><img src="../images/logo.gif" border="0"></td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <H1>
Processes Step by Step
		   </H1>
		   <!--<p> -->
	   	   <H1>
Model Implementation (1)
		   </H1>
		   <!-- </p> -->
		   <p>
		   <H2>
The doInitialSchedules() Method
		   </H2>
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="impl2.html">prev</a></li><li><a href="impl4.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left>
       		<div id="navigation"><ul>
<li><a href="../overview/0.html">The DESMO-J Tutorial</a></li>
<li><a href="../prerequisites/0.html">Prerequisites</a></li>
<li><a href="../nutshell/0.html">DESMO-J in a Nutshell</a></li>
<li><a href="../distilled/0.html">DESMO-J Distilled</a></li>
<li><a href="../at_work/0.html">DESMO-J at Work</a></li>
<li><a href="0.html" id="current_top">Processes Step by Step</a><ol>
<li><a href="0.html">Introduction</a></li>
<li><a href="1.html">Model Description</a></li>
<li><a href="design0.html">Model Design</a></li>
<li><a href="impl0.html" id="current_middle">Model Implementation (1)</a><ol>
<li><a href="impl0.html">Deriving the Model Class</a></li>
<li><a href="impl1.html">Defining Static Model Components</a></li>
<li><a href="impl2.html">The init() Method</a></li>
<li><a href="impl3.html" id="current_middle">The doInitialSchedules() Method</a></li>
<li><a href="impl4.html">The main() Method</a></li>
</ol></li>
<li><a href="impl20.html">Model Implementation (2)</a></li>
<li><a href="exp0.html">Experimentation</a></li>
</ol></li>
<li><a href="../events/0.html" id="current_bottom">Events Step by Step</a></li>
<li><a href="../distributions/0.html">Distributions</a></li>
<li><a href="../statistics/0.html">Statistical Data Collectors</a></li>
<li><a href="../advanced/0.html">Advanced Modelling Features</a></li>
	   		</ul></div>
	   </td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <p>
<p>
The third and last of the inherited methods from <tt>desmoj.core.simulator.Model</tt> is called <tt>doInitalSchedules()</tt>. Its purpose is to place all events and process activations, respectively, on the event list of the scheduler which are needed to keep the simulation alive. As soon as there are no more events on the event list, the simulation run will stop.
</p>

<p>
We will need to activate the van carrier(s) for simulation time 0.0, because they are permanent entities and are active from the very first second of our simulation run.
</p>

<p>
Furthermore we need to activate the truck generator, because it has to create the first (and all the following) trucks and let them arrive in our system.
</p>
     
<pre class="code">
   /**
    * Activates dynamic model components (simulation processes).
    *
    * This method is used to place all events or processes on the
    * internal event list of the simulator which are necessary to start
    * the simulation.
    *
    * In this case, the truck generator and the van carrier(s) have to be
    * created and activated.
    */
public void doInitialSchedules() {

   // create and activate the van carrier(s)
   for (int i=0; i < NUM_VC; i++)
   {
      VanCarrier vanCarrier = new VanCarrier(this, "Van Carrier", true);
      vanCarrier.activate();
         // Use TimeSpan to activate a process after a span of time relative to actual simulation time,
         // or use TimeInstant to activate the process at an absolute point in time.
   }

   // create and activate the truck generator process
   TruckGenerator generator = new TruckGenerator(this,"TruckArrival",false);
   generator.activate();
}
</pre>

<p>
Note that you have to supply each model component in DESMO-J with a name. In the above method we do this by naming the truck generator process "TruckArrival" and the van carrier process(es) "Van Carrier". You might worry about how we will be able to differentiate between several van carriers all named "Van Carrier" if there is more than one. The answer to this is, that DESMO-J automatically creates a unique name for each object by combining the given name (e.g. "Van Carrier") with a unique number generated by the framework. Thus DESMO-J will name the objects instantiated from the VC class "Van Carrier#1", "Van Carrier#2", "Van Carrier#3" and so on.
</p>
<br /><br />
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td  class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="impl2.html">prev</a></li><li><a href="impl4.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left><div id="navigation">&nbsp;</div></td>
       <td>&nbsp;</td>
       <td class=row_url>
http://desmoj.sourceforge.net/tutorial/processes/impl3.html
	   </td>
</tr>
</table>

</body>
</html>
