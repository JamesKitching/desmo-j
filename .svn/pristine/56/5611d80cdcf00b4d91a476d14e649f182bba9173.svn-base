<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>The DESMO-J Tutorial :
Events Step by Step
	</title>
	<link rel="stylesheet" type="text/css" href="../templates/style_blue.css" title="tutorial">
</head>

<body background="../images/background_light_lilac.gif">

<!-- Das Basis-Seitenlayout: Tabelle mit 3 Spalten und 5 Zeilen -->

<table class=table_def>
<tr>
       <td class=col_left><img src="../images/logo.gif" border="0"></td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <H1>
Events Step by Step
		   </H1>
		   <!--<p> -->
	   	   <H1>
Model Design
		   </H1>
		   <!-- </p> -->
		   <p>
		   <H2>
UML Diagrams of Events
		   </H2>
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="design1.html">prev</a></li><li><a href="design2.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left>
       		<div id="navigation"><ul>
<li><a href="../overview/0.html">The DESMO-J Tutorial</a></li>
<li><a href="../prerequisites/0.html">Prerequisites</a></li>
<li><a href="../nutshell/0.html">DESMO-J in a Nutshell</a></li>
<li><a href="../distilled/0.html">DESMO-J Distilled</a></li>
<li><a href="../at_work/0.html">DESMO-J at Work</a></li>
<li><a href="../processes/0.html">Processes Step by Step</a></li>
<li><a href="0.html" id="current_top">Events Step by Step</a><ol>
<li><a href="0.html">Introduction</a></li>
<li><a href="1.html">Model Description</a></li>
<li><a href="design0.html" id="current_middle">Model Design</a><ol>
<li><a href="design0.html">Identification of Relevant Entities</a></li>
<li><a href="design1.html">Description of Behaviour (Events)</a></li>
<li><a href="design2.html" id="current_middle">UML Diagrams of Events</a></li>
</ol></li>
<li><a href="impl0.html">Model Implementation (1)</a></li>
<li><a href="impl20.html">Model Implementation (2)</a></li>
<li><a href="exp0.html">Experimentation</a></li>
</ol></li>
<li><a href="../distributions/0.html" id="current_bottom">Distributions</a></li>
<li><a href="../statistics/0.html">Statistical Data Collectors</a></li>
<li><a href="../advanced/0.html">Advanced Modelling Features</a></li>
	   		</ul></div>
	   </td>
       <td>&nbsp;</td>
       <td class=col_right>
	   	   <p>
<p>
Changes in the state of the system occur whenever a truck enters the system and when a van carrier finishes loading a truck. So we will need an event type describing the arrival of a truck (truck arrival event) and a second event type describing the end of the loading process (service end event).
</p>

<p>
A detail we have neglected so far is how to model waiting space. The trucks need to wait in line until a van carrier is free to fetch and load their container. Well, the term queueing system already says it all: this is done using queues. Our model will need a queue for trucks to enter in case the van carrier is busy. And it will use a second queue for the van carriers to enter in case there are no trucks to serve. This second queue might not seem necessary so long as there's only one van carrier to consider. But it has several advantages:
</p>

<ul>
<li>It is a flexible means to keep track of the van carrier(s). All other solutions become difficult to use if there is more than one van carrier in the model.</li>
<li>In DESMO-J, queues automatically provide statistics about average queue length and waiting time, for example. Thus, we don't have to bother about collecting such data when we implement our model.
</ul>

<a name="TruckArrivalEvent">
<p>Here's a UML activity diagram of the <b>truck arrival event</b>:</p>

<table><tr>

<td><p>
<img src="../images/TruckArrivalEvent.gif" title="UML activity diagram of the truck arrival event" alt="UML activity diagram of the truck arrival event">
</p><td>

<td valign=top><p>
This occurs every time a truck enters the parking lot and requests service. It inserts the truck into the truck queue and then proceeds to check if a van carrier is available. If there is at least one VC available the event removes the van carrier from the queue of idle van carriers and removes the first truck from the queue of waiting trucks. To model the following loading activity it then creates and schedules a new service end event for the point in time the loading will be finished.
</p></td>

</tr></table>

<a name="ServiceEndEvent">
<p>Here's a UML activity diagram of the <b>service end event</b>:</p>

<p><img src="../images/ServiceEndEvent.gif" title="UML activity diagram of the service end event" alt="UML activity diagram of the service end event"></p>

<p>
This occurs whenever a van carrier finishes loading a truck. The truck just leaves the system leaving the van carrier free to start service on another truck. The event therefore has to check if there are still trucks waiting in the queue. If there are no trucks the event inserts the van carrier into the queue for idle van carriers (which models the VC driving back onot its parking spot waiting for the next customer). If there is at least one truck waiting, the event then removes the first truck from the queue and creates and schedules a new service end event.
</p>

<table><tr>

<a name="TruckGeneratorEvent">
<td valign=top>
<p>
The last detail we haven't yet covered is how trucks enter the system. We will need to "generate" truck objects and "feed" them into the system throughout the simulation. We will use an external event to achieve this, since trucks arrive from the outside of the system and none of the entities inside the system are concerned. The <b>truck generator event</b> creates a new truck entity and then creates and schedules a new truck arrival event for this truck. It then reschedules itself for the point in time when the next truck will arrive. The inter-arrival times for trucks will be determined by a suitable random distribution.
</p>
<p>
The event routine of the truck generator event is actually quite similar to the <tt>lifeCycle()</tt> of the <a href="../processes/design2.html#TruckGenerator">truck generator process of the process oriented version</a> of our model.
</p>
</td>

<td><p>
<img src="../images/TruckGeneratorEvent.gif" title="UML activity diagram of the truck generator event" alt="UML activity diagram of the truck generator event">
</p></td>
</tr></table>
<br /><br />
		   </p>
	   </td>
</tr>
<tr>
       <td class=col_left>&nbsp;</td>
       <td  class=colorblock>&nbsp;</td>
       <td class=row_nav>
       	<div id="navbar"><ul>
<li><a href="0.html">start</a></li><li><a href="design1.html">prev</a></li><li><a href="design2.html">next</a></li>
		</ul></div>
	   </td>
</tr>
<tr>
       <td class=col_left><div id="navigation">&nbsp;</div></td>
       <td>&nbsp;</td>
       <td class=row_url>
http://desmoj.sourceforge.net/tutorial/events/design2.html
	   </td>
</tr>
</table>

</body>
</html>
